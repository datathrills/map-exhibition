<!DOCTYPE html>
<html>

<head>

    <meta charset="utf-8" />
    <title>mapboxgl.js + d3.js tutorial - 01</title>
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no" />
    <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v1.0.0/mapbox-gl.css' rel='stylesheet' />
    <script src="https://api.tiles.mapbox.com/mapbox-gl-js/v1.0.0/mapbox-gl.js"></script>
    <link href="https://fonts.googleapis.com/css?family=Roboto&display=swap" rel="stylesheet">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    
    <style media="screen">
        body {
            margin: 0;
            padding: 0;
        }

        #map {
            position: absolute;
            top: 0;
            bottom: 0;
            width: 100%;
        }

        .picto {
            display: block; 
            width: 132.1px;
            height: 154.6px;
        }

        #number {
            font-family: 'Roboto', sans-serif;
            font-weight: 900;
            color: #474747
        }

    </style>
    
    <script>
        var socket = io();

        function generate(a){
            console.log(a);
            socket.emit('data', a);
            return false
        }

    </script>

</head>

<body>

        <div id="map">
        </div>

        <script>
            var dataContent = <%- JSON.stringify(data) %>;  
        </script>

        <script>

                // Limit the panning of the map
        var bounds = [
            [-8.025, 52.719154], // Southwest coordinates
            [-4.505, 53.820955] // Northeast coordinates
        ];

        // Set-up map
        mapboxgl.accessToken =
            'pk.eyJ1IjoiZGF0YXRocmlsbHMiLCJhIjoiY2p4b3Ftamo0MDFiazNtcjh3OGQxZXR3NiJ9.vVCJqC2SS9qE6Vi227YMTQ';
        var map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/datathrills/cjz2yjuxl07jm1dp76ja1i8uu',
            zoom: 0, // Start the map with this zoom
            center: [-6.256779999993682, 53.34395399102701], // Start the map at these coordiantes
            //minZoom: 10,
            maxBounds: bounds // Panning limit
            //pitch: 40
        });

        // Add control widget in the upper right corner
        map.addControl(new mapboxgl.NavigationControl());

        // filters for classifying icons into five categories based on age
        var mag1 = ["<", ["get", "test_data_AGE"], 20];
        var mag2 = ["all", [">=", ["get", "test_data_AGE"], 20],
            ["<", ["get", "test_data_AGE"], 30]
        ];
        var mag3 = ["all", [">=", ["get", "test_data_AGE"], 30],
            ["<", ["get", "test_data_AGE"], 40]
        ];
        var mag4 = ["all", [">=", ["get", "test_data_AGE"], 40],
            ["<", ["get", "test_data_AGE"], 50]
        ];
        var mag5 = [">=", ["get", "test_data_AGE"], 50];

        // Collar type calculations
        var collar_W = ["==", ["get", "SOC_CLASS"], "collar_W"];
        var collar_LB = ["==", ["get", "SOC_CLASS"], "collar_LB"];
        var collar_B = ["==", ["get", "SOC_CLASS"], "collar_B"];
        var collar_LB_B = ["==", ["get", "SOC_CLASS"], "collar_LB_B"];
        var collar_W_B = ["==", ["get", "SOC_CLASS"], "collar_W_B"];
        var collar_W_LB = ["==", ["get", "SOC_CLASS"], "collar_W_LB"];
        var collar_NONE = ["==", ["get", "SOC_CLASS"], "collar_NONE"];

        var no_data_MAR = ["==", ["get", "MAR_INDEX"], "NaN"];
        var yes_data_MAR = ["!=", ["get", "MAR_INDEX"], "NaN"];
        

        // colors to use for the categories
        //var colors = ['#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c'];



        //Map is loaded
        map.on('load', function () {

            // Add GeoJSON source from GeoJSON file
            map.addSource("smallAreaData", {
                "type": "geojson",
                "data": dataContent,
                "cluster": true,
                "clusterRadius": 175,

                // Defined the structure and data of the cluster properties
                "clusterProperties": {
                    
                    "num_age": ["+", ["get", "AVERAGE_AGE"]],
                    "num_BP_IRL": ["+", ["get", "BP_IRL"]],
                    "num_ECON_UNE": ["+", ["get", "ECON_UNE"]],

                    "num_collar_W": ["+", ["case", collar_W, 1, 0]],
                    "num_collar_LB": ["+", ["case", collar_LB, 1, 0]],
                    "num_collar_B": ["+", ["case", collar_B, 1, 0]],
                    "num_collar_LB_B": ["+", ["case", collar_LB_B, 1, 0]],
                    "num_collar_W_B": ["+", ["case", collar_W_B, 1, 0]],
                    "num_collar_W_LB": ["+", ["case", collar_W_LB, 1, 0]],
                    "num_collar_NONE": ["+", ["case", collar_W_LB, 1, 0]],

                    "num_HIG_EDU": ["+", ["get", "HIG_EDU"]],
                    "num_EYEBAG_INDEX": ["+", ["get", "EYEBAG_INDEX"]],
                    "num_HEALTH": ["+", ["get", "HEALTH"]],

                    "num_no_data_MAR": ["+", ["case", no_data_MAR, 1, 0]],
                    "num_added_data_MAR": ["+", ["case", yes_data_MAR, ["to-number", ["get", "MAR_INDEX"]], 0]],
                }
            });

            map.addLayer({
                "id": "smallAreaDataLayer",
                "type": "fill",
                "source": "smallAreaData"
            });


            // Objects for caching and keeping track of HTML marker objects (for performance)
            var markers = {};
            var markersOnScreen = {};

            // Gets called when users moves the map
            function updateMarkers() {
                var newMarkers = {};
                var features = map.querySourceFeatures('smallAreaData');
                

                // For every feature that is in the screen, create an HTML marker for it (if we didn't yet),
                // and add it to the map if it's not there already
                for (var i = 0; i < features.length; i++) {
                    var coords = features[i].geometry.coordinates; // coordinates
                    var props = features[i].properties;
                    
                    // If feature it's NOT a cluster
                    if (!props.cluster) {

                        
                        var collar_codes = ["collar_W", "collar_LB", "collar_B", "collar_LB_B", "collar_W_B", "collar_W_LB","num_collar_NONE"];

                        //data
                        var age = props.AVERAGE_AGE;
                        var birthPlace = props.BP_IRL;
                        var unemp = props.ECON_UNE;
                        var soc = collar_codes.indexOf(props.SOC_CLASS);
                        
                        var edu = props.HIG_EDU;
                        var commuting = props.EYEBAG_INDEX;
                        var health = props.HEALTH;

                        var mar_index = Number(props.MAR_INDEX);
                        
                        var id = "S" + props.OBJECTID;
                        var marker = markers[id];


                        if (!marker) {
                            var el = createPicto(age, birthPlace, unemp, soc, edu, commuting, health, mar_index, id, 0);
                            
                            marker = markers[id] = new mapboxgl.Marker({
                                element: el
                            }).setLngLat(coords);
                        }

                        newMarkers[id] = marker;
                        if (!markersOnScreen[id])
                        marker.addTo(map);


                    // If feature IS a cluster
                    } else {
                        
                        var id = props.cluster_id;
                        //console.log(props);
                        
                        //data
                        var age = props.num_age / props.point_count; // Average age
                        var birthPlace = props.num_BP_IRL / props.point_count; // Average percentage born in IR
                        var unemp = props.num_ECON_UNE / props.point_count; // Average unemployment

                        var soc_class_array = [props.num_collar_W, props.num_collar_LB, props.num_collar_B, props.num_collar_LB_B, props.num_collar_W_B, props.num_collar_W_LB, props.num_collar_NONE];
                        var index_of_soc = soc_class_array.reduce((iMax, x, i, arr) => x > arr[iMax] ? i : iMax, 0); // Mode social class  

                        var edu = props.num_HIG_EDU / props.point_count; // Average percentage with higher education
                        var commuting = props.num_EYEBAG_INDEX / props.point_count; // Average commuting index
                        var health = props.num_HEALTH / props.point_count; // Average percentage of people who feel healthy

                        var mar_no_index = props.num_no_data_MAR; // Number of points with no data
                        var mar_index = props.num_added_data_MAR / (props.point_count - mar_no_index); // Average MAR Index

                        var marker = markers[id]; // Is this ID in markers array?
                        
                        if (!marker) {
                            var el = createPicto(age, birthPlace, unemp, index_of_soc, edu, commuting, health, mar_index, id, props.point_count);
                            marker = markers[id] = new mapboxgl.Marker({
                                element: el
                            }).setLngLat(coords);
                        }

                        newMarkers[id] = marker;

                        if (!markersOnScreen[id])
                            marker.addTo(map);
                    }  
                }

                // For every marker we've added previously, remove those that are no longer visible
                for (id in markersOnScreen) {
                    if (!newMarkers[id])
                        markersOnScreen[id].remove();
                }

                markersOnScreen = newMarkers;
            }


            // After the GeoJSON data is loaded, update markers on the screen and do so on every map move/moveend
            map.on('data', function (e) {
                // exit the function 'smallAreaData' isn't loaded
                if (e.sourceId !== 'smallAreaData' || !e.isSourceLoaded) return;

                map.on('move', updateMarkers);
                map.on('moveend', updateMarkers);
                updateMarkers();
            });
        });

        
        // Helper functions for building people-icons

        // Determents which type of mouth to draw
        const mouth_gen = function(i, a, b) {
            if((i<-0.1)||(i>0.1)){
                return a
            } else {
                return b
            }
        };

        // Different position of smiley faces
        const mouthOrigin = function(i){
            if (i>0) {return "71"}
            else if(i<-0) {return "71"};
        }


        // Main function for building people-icons
        function createPicto(age, birthPlace, unemp, soc, edu, commuting, health, mar_index, id, number_joins){

            //temp
            const educationValue =  0.21 + edu * 0.05;
            const unemploymentValue = unemp / 42;
            const haircolorValue = 'rgb('+ (age-20) *(277/73) +', '+ (age-20)*(277/73) +', '+ (age-20)*(277/73) +')';
            const eyeBagsScale = (edu <40)?1:((edu>59)?1.55:((edu*2.65)/100));
            const eyeBagsValue = commuting / 6;
            const number_text = (number_joins>0)?number_joins:"";
            const center_text = 54.4978 - (2.5019 * number_joins.toString().length);

            const val_r = 2.4;
            const val_g = 1.13;
            const val_b = 1.9;

            const bodycolorValue = 'rgb('+ Math.round(((99 * val_r)+24) - (birthPlace*val_r)) +', 109, 44)';



            const collar_colors = ["#F7F7F7", "#88B9E2", "#265E8C"];

            const svg = '<svg onclick="generate('+edu+')" id="'+ id +'" class="picto" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 114 131.3" enable-background="new 0 0 114 131.3" xml:space="preserve">';

            const body = '<path id="body" fill="'+bodycolorValue+'" d="M10.8,121v-16.9c0-32,30.1-28.1,30.1-28.1h33.6c0,0,29.3-3.9,29.3,28.1V121H10.8z"/>';

            const collar = '<g id="collar"><path fill="'+collar_colors[soc]+'" d="M38.9,71l-4.4,3.7L45,92.4l12.1-12.5C57.1,79.9,45.4,79.7,38.9,71z"/><path fill="'+collar_colors[soc]+'" d="M75.1,71l4.4,3.7L69,92.4L56.9,79.9C56.9,79.9,68.6,79.7,75.1,71z"/></g>';

            const face = '<ellipse id="Face_11_" fill="#E5D6BD" cx="57" cy="47.5" rx="26.9" ry="32.8"/>';

            const cheeks = '<g id="cheeks"><ellipse id="cheek_l" transform="matrix(0.9643 0.2647 -0.2647 0.9643 16.5147 -8.7475)" opacity="'+ health +'" fill="#F4A2BC" cx="40.7" cy="56.9" rx="7.3" ry="6.2"/> <ellipse id="cheek_r" transform="matrix(-0.9643 0.2647 -0.2647 -0.9643 159.014 92.3913)" opacity="'+ health +'" fill="#F4A2BC" cx="73.3" cy="56.9" rx="7.3" ry="6.2"/></g>';

            const beard = '<g id="beard" opacity="'+ unemploymentValue +'"><circle fill="#848484" cx="37.6" cy="68.4" r="0.5"/><circle fill="#848484" cx="40.7" cy="68.4" r="0.5"/><circle fill="#848484" cx="40.7" cy="71.5" r="0.5"/><circle fill="#848484" cx="43.8" cy="69.2" r="0.5"/><circle fill="#848484" cx="44.6" cy="66.1" r="0.5"/><circle fill="#848484" cx="46.9" cy="69.2" r="0.5"/><circle fill="#848484" cx="44.6" cy="72.3" r="0.5"/><circle fill="#848484" cx="48.5" cy="72.3" r="0.5"/><circle fill="#848484" cx="46.1" cy="74.6" r="0.5"/><circle fill="#848484" cx="50" cy="74.6" r="0.5"/><circle fill="#848484" cx="50" cy="76.9" r="0.5"/><circle fill="#848484" cx="53.1" cy="75.4" r="0.5"/><circle fill="#848484" cx="54.7" cy="78.5" r="0.5"/><circle fill="#848484" cx="38.4" cy="65.3" r="0.5"/><circle fill="#848484" cx="35.3" cy="63.7" r="0.5"/><circle fill="#848484" cx="56.2" cy="76.1" r="0.5"/><circle fill="#848484" cx="74.1" cy="69.2" r="0.5"/><circle fill="#848484" cx="71" cy="69.2" r="0.5"/><circle fill="#848484" cx="71" cy="72.3" r="0.5"/><circle fill="#848484" cx="67.9" cy="69.9" r="0.5"/><circle fill="#848484" cx="67.1" cy="66.8" r="0.5"/><circle fill="#848484" cx="64.8" cy="69.9" r="0.5"/><circle fill="#848484" cx="67.1" cy="73" r="0.5"/><circle fill="#848484" cx="63.2" cy="73" r="0.5"/><circle fill="#848484" cx="65.5" cy="75.4" r="0.5"/><circle fill="#848484" cx="61.7" cy="75.4" r="0.5"/><circle fill="#848484" cx="61.7" cy="77.7" r="0.5"/><circle fill="#848484" cx="58.6" cy="76.1" r="0.5"/><circle fill="#848484" cx="57" cy="79.2" r="0.5"/><circle fill="#848484" cx="73.3" cy="66.1" r="0.5"/><circle fill="#848484" cx="76.4" cy="64.5" r="0.5"/><circle fill="#848484" cx="78.7" cy="62.2" r="0.5"/></g>';

            const eyes = '<g id="eyes"><circle id="eye_l" fill="#6D6D6D" stroke="#E5D6BD" cx="47.3" cy="47.5" r="'+ educationValue +'"/><circle id="eye_r" fill="#6D6D6D" stroke="#E5D6BD" cx="66.7" cy="47.5" r="'+ educationValue +'"/></g>';

            const eyeBags = '<g id="eyeBags"><path transform="scale(' + eyeBagsScale + ')" transform-origin="47.3px 47.5px" id="bag_l" opacity="0.6" fill="none" stroke="#6D6D6D" stroke-width="' + eyeBagsValue + '" stroke-miterlimit="10" d="M51.1,47.3 c0,2-1.7,3.8-3.8,3.8s-3.8-1.8-3.8-3.8"/> <path transform="scale(' + eyeBagsScale + ')" transform-origin="66.7px 47.5px" id="bag_r" opacity="0.6" fill="none" stroke="#6D6D6D" stroke-width="' + eyeBagsValue + '" stroke-miterlimit="10" d="M70.5,47.3 c0,2-1.7,3.8-3.8,3.8c-2.1,0-3.8-1.8-3.8-3.8"/></g>';

            const mouth_smile = '<path transform="scale(1,'+mar_index+')" transform-origin="57px 71px" id="mouth" fill="#6D6D6D" d="M65.8,65c0,4-3.9,8.8-8.8,8.8S48.2,69,48.2,65H65.8z"/>';

            const mouth_line = '<path id="mouth" opacity="0.6" stroke-width="0.8" fill="#6D6D6D" stroke="#231F20" stroke-miterlimit="10" d="M64.1,70.5H49.3H64.1z"/>'

            const hair = '<path id="hair" fill="'+ haircolorValue +'" d="M42.8,28.9c0,0,8.3,5.5,14.2,7.3c5.9,1.7,16.4,4.1,19.5,5.6c3,1.5,4.6,4,5.5,7c1,3.2,1.1,6.3,1.1,6.3 s2.6-3.2,3.4-8.9c1.1-8,2.4-28.3-16-34.3s-27.6,3.6-27.6,3.6s-8.3-0.8-13.4,10.6c-2.8,6.3-3,11.7-2.3,18c0.7,6.1,3.5,10.4,3.5,10.4 S34.5,35.8,42.8,28.9z"/>';

            const background = '<path id="joined" fill="#D3F935" d="M0.8,131v-26.9c0-18.6,8.7-31.5,23.8-36.3c-1.4-3-2.5-6.2-3.2-9.5c-1.3-2.5-3.3-7-4-12.9 c-0.7-6.4-0.9-14.3,3.1-23.3C25,11.8,32.5,7.1,39,5.9C42.7,3.3,49.4,0,58.9,0c4.7,0,9.7,0.8,14.7,2.5c17.7,5.7,26,22.2,22.8,45.2 c-0.7,5.2-2.5,9.1-3.9,11.4c-0.7,3-1.7,5.9-3,8.6c13,4,24.2,15,24.2,36.4V131H0.8z"/>';

            const text = '<text id="number" transform="matrix(1 0 0 1 ' + center_text + ' 128.75)" fill="#383838" font-size="9">' + number_text + '</text>';

            const joins = (number_joins>0)?background:"";
            const mouth_gen = ((mar_index<-0.01)||(mar_index>0.01))?mouth_smile:mouth_line;
            
            //console.log(mar_index);

            var el = document.createElement('div');
            el.innerHTML = svg + joins + text + body + collar + face + cheeks + beard + eyes + eyeBags + mouth_gen + hair + '</svg>';
            return el.firstChild;
        }
        
        </script>

</body>


</html>